name = "git"

[configuration.named_arguments_style]
separator = "equal"
multi_style = "repeat"

[menus.b]
name = "Branch operations"

[menus.b.arguments]
"-f" = { flag = "--force" }
"-t" = { flag = "--track" }

[menus.b.commands.b]
name = "branch"
description = "Switch to an existing branch"
template = ["git", "checkout", { name = "branch name", suggestions = { command = "git for-each-ref --format='%(refname:short)' refs/heads/" } }]

[menus.b.commands.c]
name = "checkout"
description = "Create a new branch and switch to it"
template = ["git", "checkout", { include = "*" }, "-b", { name = "branch name", suggestions = { command = "git for-each-ref --format='%(refname:short)' refs/heads/" } }]

[menus.b.commands.C]
name = "create"
description = "Create new branch but stay on the current branch"
template = ["git", "branch", { include = "*" }, { name = "branch_name" }]

[menus.b.commands.d]
name = "delete"
description = "Delete a branch"
template = [
  "git",
  "branch",
  "-D",
  { name = "branch_name", multi = true, suggestions = { command = "git for-each-ref --format='%(refname:short)' refs/heads/" } },
]

[menus.b.commands.l]
name = "list"
description = "List branches"
template = ["git", "branch", "--list"]

[menus.b.commands.m]
name = "merge"
description = "Merge branch"
template = ["git", "merge", { include = "*" }, { name = "branch or commit" }]

## Commit
[menus.c]
name = "Commit"

[menus.c.arguments]
"-R" = { flag = "--reset-author" }
"-a" = { flag = "--all" }
"-n" = { flag = "--no-verify" }
"-e" = { flag = "--edit" }

[menus.c.commands.c]
name = "commit"
template = [
  "git",
  "commit",
  { name = "commit message", template = ["-m", "{self.value}"] },
]

[menus.c.commands.w]
name = "reword"
template = [
  "git",
  "commit",
  "--amend",
  "--only",
  "--allow-empty",
  { include = "*" },
  { name = "updated commit message", template = ["-m", "{self.value}"] },
]

## Diffs
[menus.d]
name = "Diff operations"

[menus.d.arguments]
"--color" = { name = "--color", selected = "always", choices = [
  "always",
  "never",
  "auto",
] }
"--stat" = { flag = "--stat", on = true, description = "Show diffstat" }
"-b" = { flag = "--ignore-space-change" }
"-c" = { flag = "--cached" }
"-n" = { flag = "--name-only" }
"-w" = { flag = "--ignore-all-space", on = true, description = "Ignore whitespace changes" }

[menus.d.commands.d]
name = "diff"
description = "Show changes between commits, commit and working tree, etc"
template = ["git", "diff", { include = "*" }]

[menus.d.commands.s]
name = "staged"
description = "Show staged changes"
template = ["git", "diff", "--staged", { include = "*" }]

## Clean
[menus.k]
name = "Clean operations"

[menus.k.arguments]
"-f" = { flag = "--force" }
"-d" = { flag = "--directory" }
"-x" = { flag = "--exclude" }
"--dry-run" = { flag = "--dry-run" }
"-i" = { flag = "--interactive", on = true }

[menus.k.commands.c]
name = "clean"
description = "Remove untracked files from working tree"
template = ["git", "clean", { include = "*" }]

## Logs
[menus.l]
name = "Show commit logs"

[menus.l.arguments]
"--color" = { name = "--color", selected = "always", choices = [
  "always",
  "never",
  "auto",
] }
"-d" = { flag = "--decorate", on = true }
"-g" = { flag = "--graph", on = true }
"-o" = { flag = "--oneline", on = true }
"-n" = { name = "--max-count", value = "10" }
"-s" = { flag = "--stat", description = "Show +/- statistics" }
"-S" = { name = "--since" }
"-a" = { name = "--author", description = "Filter to authors matching this pattern", suggestions = { command = 'git log --pretty="%an" | sort -u' }, multi = true }

[menus.l.commands.a]
name = "all"
description = "Show commit logs for all branches"
template = ["git", "log", "--branches=*", { include = "*" }]

[menus.l.commands.l]
name = "current"
description = "Show commit logs for the current branch"
template = ["git", "log", { include = "*" }]

## Merge
[menus.m]
name = "Merge operations"

[menus.m.arguments]
"--no-ff" = { flag = "--no-ff" }
"-s" = { flag = "--squash" }
"-c" = { flag = "--continue" }
"-a" = { flag = "--abort" }
"-i" = { flag = "--interactive", on = true }

[menus.m.commands.m]
name = "merge"
description = "Join two or more development histories together"
template = ["git", "merge", { include = "*" }]

[menus.m.commands.r]
name = "rebase"
description = "Reapply commits on top of another base tip"
template = ["git", "rebase", { include = "*" }, { name = "branch or commit" }]

## Remote operations
[menus.p]
name = "Remote operations"

[menus.p.arguments]
"-f" = { flag = "--force" }
"-u" = { flag = "--set-upstream" }

[menus.p.commands.p]
name = "push"
description = "Push to remote"
template = ["git", "push", { include = "*" }]

[menus.p.commands.l]
name = "pull"
description = "Pull from remote"
template = ["git", "pull", { include = "*" }]

[menus.p.commands.f]
name = "fetch"
description = "Download objects and refs"
template = ["git", "fetch", { include = "*" }]

## Remote repository
[menus.r]
name = "Remote repository"

[menus.r.commands.a]
name = "add"
description = "Add remote repository"
template = [
  "git",
  "remote",
  "add",
  { include = "*" },
  { name = "repository name" },
  { name = "repository URL" },
]

[menus.r.commands.r]
name = "remove"
description = "Remove remote repository"
template = ["git", "remote", "remove", { include = "*" }]

[menus.r.commands.l]
name = "list"
description = "List remote repositories"
template = ["git", "remote", "-v"]

## Status and staging
[menus.s]
name = "Status and staging"

[menus.s.commands.s]
name = "status"
description = "Show working tree status"
template = ["git", "status", { include = "*" }]

[menus.s.commands.a]
name = "add"
description = "Add file contents to index"
template = [
  "git",
  "add",
  { include = "*" },
  { name = "path", multi = true, suggestions = { command = "git ls-files -m -o --exclude-standard" } },
]

[menus.s.commands.r]
name = "reset"
description = "Reset current HEAD"
template = ["git", "reset", { include = "*" }]

## Stash
[menus.S]
name = "Stash operations"

[menus.S.arguments]
"-a" = { flag = "--all" }
"-k" = { flag = "--keep-index", on = true }
"-u" = { flag = "--include-untracked", on = true }

[menus.S.commands.s]
name = "save"
description = "Stash current changes"
template = ["git", "stash", "push", { include = "*" }]

[menus.S.commands.p]
name = "pop"
description = "Apply and remove stash"
template = ["git", "stash", "pop", { name = "stash", suggestions = { command = 'git stash list --pretty="%gd"' } }]

[menus.S.commands.a]
name = "apply"
description = "Apply stash without removing"
template = ["git", "stash", "apply", { name = "stash", suggestions = { command = 'git stash list --pretty="%gd"' } }]

[menus.S.commands.l]
name = "list"
description = "List stashes"
template = ["git", "stash", "list"]

[menus.S.commands.d]
name = "drop"
description = "Remove a stash"
template = ["git", "stash", "drop", { name = "stash", suggestions = { command = 'git stash list --pretty="%gd"' } }]

[menus.S.commands.c]
name = "clear"
description = "Remove all stashes"
template = ["git", "stash", "clear"]

## Tags
[menus.t]
name = "Tag operations"

[menus.t.arguments]
"-f" = { flag = "--force", description = "Replace the tags if it already exists" }

[menus.t.commands.c]
name = "create"
description = "Create a simple tag"
template = ["git", "tag", { include = "*" }, { name = "tag name" }]

[menus.t.commands.C]
name = "create annotated"
description = "Create an annotated tag"
template = ["git", "tag", { include = "*" }, "-a", { name = "tag name" }, "-m", { name = "tag message" } ]

[menus.t.commands.d]
name = "delete"
description = "Delete a tag"
template = [ "git", "tag", "-d", { name = "tag name", multi = true, suggestions = { command = "git tag --list" } }]

[menus.t.commands.l]
name = "list"
description = "List tags"
template = ["git", "tag", "--list", { include = "*" }]
